;;; .emacs -- Matthew Doty's emacs configuration   -*- mode: emacs-lisp; lexical-binding: t; -*-

;;; Commentary:
;;;   This .emacs is intended to download all dependencies if
;;;  ~/.emacs.d is ever deleted

;;; Code:

;;; Package Management ;;;

(require 'package)
(add-to-list 'package-archives
  '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;;; General Emacs Settings ;;;
(eval-when-compile
  ;; use-package
  (when (not (package-installed-p 'use-package))
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)

  ;; Basic Interface
  (fset 'yes-or-no-p 'y-or-n-p)

  (setq
    inhibit-startup-screen      t                        ; No startup screen
    disabled-command-function   nil                      ; No prompts
    ring-bell-function          'ignore                  ; No error bell
    interprogram-cut-function   nil                      ; No system clipboard (copy)
    interprogram-paste-function nil                      ; No system clipboard (paste)
    vc-follow-symlinks          nil                      ; Always follow symlinks
    )

  (tool-bar-mode -1)                                     ; No tool-bar
  (menu-bar-mode -1)                                     ; No menu-bar
  (blink-cursor-mode -1)                                 ; No cursor blinking
  (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1)) ; No scrollbar


  ;; Don't deselect after copy
  (defadvice kill-ring-save (after keep-transient-mark-active ())
    "Override the deactivation of the mark."
    (setq deactivate-mark nil))
  (ad-activate 'kill-ring-save)

  ;; Status bar
  (setq display-time-day-and-date t)
  (display-time-mode 1)
  (setq-default display-time-24hr-format t)
  (display-battery-mode 1)
  (setq-default battery-mode-line-format " [%b%t]")

  (require 'uniquify)
  (setq uniquify-buffer-name-style 'reverse)

  ;; Scratch buffer
  (setq initial-scratch-message "")

  ;; Autoformat

  (require 'cl)
  (defun smart-buffer-region-format (format-region-fn)
    "Format the current region using the provided FORMAT-REGION-FN.
     If no region is selected then format the current buffer."
    (let ((original-point (point)))
      (if mark-active
        (let ((buffer-size-init (buffer-size))
               (start (region-beginning))
               (end (region-end))
               deactivate-mark)
          (funcall format-region-fn start end)
          (let ((new-end (+ end (- (buffer-size) buffer-size-init))))
            (destructuring-bind (new-point . new-region-far-end)
              (if (eq end original-point)
                (cons new-end start)
                (cons start new-end))
              (set-mark new-region-far-end)
              (goto-char new-point)))
          (activate-mark))
        (progn
          (funcall format-region-fn (point-min) (point-max))
          (goto-char original-point)
          (message "Formatted file %s" (buffer-file-name))))))

  (defun ensure-list (x) (if (listp x) x (list x)))

  (defun smart-mode-buffer-region-format (modes format-region-fn)
    (when (memq major-mode (ensure-list modes)) (smart-buffer-region-format format-region-fn)))

  ;; Elisp
  (setq-default lisp-indent-offset 2)

  (defun elisp-format ()
    "Format a region of elisp code or the entire buffer if there is no selection."
    (interactive)
    (smart-mode-buffer-region-format '(lisp-interaction-mode emacs-lisp-mode) #'indent-region))
  (define-key emacs-lisp-mode-map (kbd "C-c C-f") #'elisp-format)
  (define-key lisp-interaction-mode-map (kbd "C-c C-f") #'elisp-format)

  (defun elisp-format-buffer ()
    "Indent an elisp buffer."
    (when (equal major-mode 'emacs-lisp-mode)
      (indent-region (point-min) (point-max))))
  (add-hook 'before-save-hook #'elisp-format-buffer)

  (defun elisp-eval-region-or-last-expression ()
    "Evaluate a region or expression in elisp."
    (interactive)
    (if mark-active
      (eval-region (region-beginning) (region-end) t)
      (eval-last-sexp nil)))
  (define-key emacs-lisp-mode-map (kbd "M-RET") #'elisp-eval-region-or-last-expression)
  (define-key lisp-interaction-mode-map (kbd "M-RET") #'elisp-eval-region-or-last-expression)
  (define-key emacs-lisp-mode-map (kbd "s-<return>") #'elisp-eval-region-or-last-expression)
  (define-key lisp-interaction-mode-map (kbd "s-<return>") #'elisp-eval-region-or-last-expression)

  (defun elisp-evaluate-buffer ()
    "Evaluate a buffer of elisp expressions."
    (interactive)
    (eval-buffer)
    (message "Elisp evaluated %s" (buffer-file-name)))
  (define-key emacs-lisp-mode-map (kbd "C-c C-l") #'elisp-evaluate-buffer)
  (define-key lisp-interaction-mode-map (kbd "C-c C-l") #'elisp-evaluate-buffer)

  ;; Eldoc mode
  (setq eldoc-minor-mode-string nil)
  (add-hook 'emacs-lisp-mode-hook  #'eldoc-mode)

  ;; Shell scripting
  (require 'sh-script)

  (setq sh-basic-offset 2)
  (defconst sh-format-cmd (format "shfmt -i %d" sh-basic-offset))

  ;; TODO: Preserve window position
  ;; TODO: Check if shfmt exists
  ;; TODO: Check if shfmt exited properly
  ;; TODO: Check if leading whitespace
  ;; TODO: Preserve region trailing whitespace
  (defun sh-format ()
    "Format a region of shell commands or the entire buffer if there is no selection."
    (interactive)
    (smart-mode-buffer-region-format
      'sh-mode
      (lambda (start end)
        (shell-command-on-region start end sh-format-cmd (buffer-name) t))))
  (define-key sh-mode-map (kbd "C-c C-f") #'sh-format)

  (defun sh-format-buffer ()
    "Format a buffer of shell commands."
    (when (equal major-mode 'sh-mode)
      (let ((original-point (point)))
        (shell-command-on-region (point-min) (point-max) sh-format-cmd (buffer-name) t)
        (goto-char original-point))))
  (add-hook 'before-save-hook #'sh-format-buffer)

  ;; Eshell
  (defun eshell/open (file)
    "Eshell command to open a FILE."
    (find-file file))
  (defun eshell/openo (file)
    "Eshell command to open a FILE in another window."
    (find-file-other-window file))
  (defun eshell/bat (file)
    "Eshell command to open a FILE (read only)."
    (find-file-read-only-other-window file))
  (defun eshell/emacs (file)
    "Hack EMACS to just open a FILE in eshell."
    (eshell/open file))
  (defun eshell/less (file)
    "Hack less to open a FILE (read only)."
    (eshell/bat file))
  (defun eshell/more (file)
    "Hack more to open a FILE (read only)."
    (eshell/bat file))

  ;; Ido mode
  (ido-mode t)
  (setq-default
    ido-use-filename-at-point 'guess
    ido-use-url-at-point      t
    ido-create-new-buffer     'always)

  ;; Find file with line number at point
  ;; https://www.emacswiki.org/emacs/FindFileAtPoint#toc6
  (defvar ffap-file-at-point-line-number nil
    "Variable to hold line number from the last `ffap-file-at-point' call.")

  (defadvice ffap-file-at-point (after ffap-store-line-number activate)
    "Search `ffap-string-at-point' for a line number pattern and save it in the `ffap-file-at-point-line-number' variable."
    (let* ((string (ffap-string-at-point)) ;; string/name definition copied from `ffap-string-at-point'
            (name
              (or (condition-case nil
                    (and (not (string-match "//" string)) ; foo.com://bar
                      (substitute-in-file-name string))
                    (error nil))
                string))
            (line-number-string
              (and (string-match ":[0-9]+" name)
                (substring name (1+ (match-beginning 0)) (match-end 0))))
            (line-number
              (and line-number-string
                (string-to-number line-number-string))))
      (if (and line-number (> line-number 0))
        (setq ffap-file-at-point-line-number line-number
          ffap-file-at-point-line-number nil))))

  (defadvice find-file-at-point (after ffap-goto-line-number activate)
    "If `ffap-file-at-point-line-number' is non-nil goto this line."
    (when ffap-file-at-point-line-number
      (goto-line ffap-file-at-point-line-number)
      (setq ffap-file-at-point-line-number nil)))

  ;; Run git blame at point and put result in message buffer
  ;; https://jayconrod.com/posts/67/emacs--run-git-blame-on-the-current-line
  (defun chomp-end (string)
    "Chomp tailing whitespace from STRING."
    (replace-regexp-in-string (rx (* (any " \t\n")) eos) "" string))

  (defun git-blame ()
    "Runs `git blame` on the current line and writes the result to the message buffer."
    (interactive)
    (let* ((line-number (save-excursion (goto-char (point-at-bol)) (+ 1 (count-lines 1 (point)))))
            (line-arg (format "%d,%d" line-number line-number))
            (current-file-name (buffer-file-name))
            (commit-buf (generate-new-buffer "*git-blame-line-commit*"))
            (commit-id (unwind-protect
                         (with-current-buffer commit-buf
                           (call-process "git" nil commit-buf nil "blame" "-L" line-arg "--" current-file-name)
                           (buffer-substring 1 9))
                         (kill-buffer commit-buf))))
      (if (string= "00000000" commit-id)
        (message "Not Committed Yet")
        (let* ((log-buf (generate-new-buffer "*git-blame-line-log*")))
          (unwind-protect
            (with-current-buffer log-buf
              (call-process "git" nil log-buf nil "log" "-1" "--pretty=%h   %an   %s" commit-id)
              (message "Line %d: %s" line-number (chomp-end (buffer-string))))
            (kill-buffer log-buf))))))

  (define-key global-map (kbd "C-c C-b") 'git-blame)

  ;; Window System Configuration
  (when window-system

    ;; Transparency
    (set-frame-parameter (selected-frame) 'alpha '(95 95))

    ;; Font Ligatures for OS X
    (when (fboundp 'mac-auto-operator-composition-mode)
      (mac-auto-operator-composition-mode)
      (add-to-list 'default-frame-alist '(font . "Hasklig-14"))
      (set-face-attribute 'default t :font "Hasklig-14"))

    (setq default-directory "~/")             ; Default directory is home directory

    (when (equal system-type 'darwin)
      ;; Use familiar keys in OS X
      (setq-default
        mac-control-modifier 'control
        mac-option-modifier  'meta
        mac-command-modifier 'super)

      ;; Manipulate font size with usual bindings
      ;; To return to default font size, <C-x C-0>
      (global-set-key (kbd "s-=")              'text-scale-increase)
      (global-set-key (kbd "s-+")              'text-scale-increase)
      (global-set-key (kbd "s--")              'text-scale-decrease)

      ;; Common key bindings
      (global-set-key (kbd "s-a")              'mark-whole-buffer)       ; Select all

      ;; Searching
      (global-set-key (kbd "s-f")              'isearch-forward)         ; Forward-search
      (global-set-key (kbd "s-g")              'isearch-repeat-forward)  ; Forward-search (again)
      (define-key isearch-mode-map (kbd "s-f") 'isearch-repeat-forward)  ; Forward-search (again)
      (global-set-key (kbd "s-F")              'isearch-backward)        ; Backward-search
      (global-set-key (kbd "s-G")              'isearch-repeat-backward) ; Backward-search (again)
      (define-key isearch-mode-map (kbd "s-F") 'isearch-repeat-backward) ; Forward-search (again)

      (global-set-key (kbd "s-z")              'undo)                    ; Undo
      (global-set-key (kbd "s-s")              'save-buffer)             ; Save
      (global-set-key (kbd "s-q")              'kill-emacs)              ; Quit
      (global-set-key (kbd "s-;")              'comment-line)            ; Comment line
      (global-set-key (kbd "<s-mouse-1>")      'find-file-at-point)      ; Open file clicked
      )

    (when (eq window-system 'x)
      ;; Manipulate font size with usual bindings
      ;; To return to default font size, <C-x C-0>
      (global-set-key (kbd "C-=") 'text-scale-increase)
      (global-set-key (kbd "C-+") 'text-scale-increase)
      (global-set-key (kbd "C--") 'text-scale-decrease)
      )
    )

  ;; Built-in emacs mode hooks
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)

  ;; Put customizations in another file
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file 'noerror)
  )

;;; Interface ;;;

;; Theme
(use-package gruvbox-theme
  :config (load-theme 'gruvbox-dark-medium t))

;; Save position
(use-package saveplace :config (save-place-mode))

;; Use shell exec path
(use-package exec-path-from-shell
  :when (memq window-system '(mac ns x))
  :config
  (setq exec-path-from-shell-check-startup-files nil)
  (exec-path-from-shell-initialize))

;; Flexible ido
(use-package flx-ido
  :config
  (flx-ido-mode t)
  (setq-default
    ido-enable-flex-matching t
    ido-use-faces            nil))

;; Copy-Pasta
(use-package simpleclip
  :config
  ;; Settup interprogram clipboard interaction
  ;;; For X-Windows
  (when (eq window-system 'x)
    (global-set-key (kbd "C-S-c") #'simpleclip-copy)
    (global-set-key (kbd "C-S-x") #'simpleclip-cut)
    (global-set-key (kbd "C-S-v") #'simpleclip-paste))
  ;;; For OSX
  (when (memq window-system '(mac ns))
    (simpleclip-mode 1)))

;;; Prog-Mode ;;;

(use-package company
  :demand
  :diminish ""
  :hook (prog-mode . company-mode)
  :config
  (setq
    company-tooltip-limit             20                      ; bigger popup window
    company-idle-delay                .3                      ; decrease delay before autocompletion popup shows
    company-echo-delay                0                       ; remove annoying blinking
    company-begin-commands            '(self-insert-command)  ; start autocompletion only after typing
    company-tooltip-align-annotations t
    ))

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package paren
  :hook (prog-mode . show-paren-mode)
  :commands color-complement-hex
  :config
  (require 'color)
  (let ((cursor-color (face-attribute 'cursor :background)))
    (set-face-background 'show-paren-match (color-complement-hex cursor-color))
    (set-face-foreground 'show-paren-match cursor-color))
  )

;; Formatting

(use-package ethan-wspace
  :hook (prog-mode . ethan-wspace-mode)
  :init  (setq-default mode-require-final-newline nil)
  :commands (ethan-wspace-clean-all clean-up-tabs set-makefile-whitespace-mode)
  :config
  (add-hook 'before-save-hook #'ethan-wspace-clean-all)
  (setq-default
    tab-width         2
    indent-tabs-mode  nil
    )

  ;; Only use tabs when making makefiles
  (defun clean-up-tabs ()
    "Cleans up tabs if not in `indent-tabs-mode`."
    (unless indent-tabs-mode
      (untabify (point-min) (point-max))))
  (add-hook 'before-save-hook #'clean-up-tabs)

  (defun set-makefile-whitespace-mode ()
    "Change whitespace settings to accept tabs, in a manner suitable for a Makefile."
    (setq ethan-wspace-errors (remove 'tabs ethan-wspace-errors)
      indent-tabs-mode    t))
  (add-hook 'makefile-mode-hook #'set-makefile-whitespace-mode)
  )

;;; Git ;;;

(use-package magit
  :bind ("C-c C-g" . magit-status)
  )

(use-package git-gutter
  :hook (prog-mode . git-gutter-mode)
  )

;;; Evil ;;;

(use-package evil
  :commands (evil-set-initial-state
              evil-ex-define-cmd
              set-evil-initial-state-in-normal-mode)
  :init     (evil-mode)         ; Evil has to be global :-/
  :config
  ;; Ignore evil-mode except for prog-mode
  (setq
    evil-default-state  'emacs   ; Make default state be emacs (for repls and stuff)
    evil-default-cursor t        ; Use default emacs cursor
    evil-shift-width    2        ; Use 2 spaces when shifting with <<>>
    )

  ;; Most of the time we don't want to be in evil-mode, except for prog-mode
  (defun set-evil-initial-state-in-normal-mode ()
    "Puts evil in `normal` mode in its initial state."
    (interactive) (evil-set-initial-state major-mode 'normal))
  (add-hook 'prog-mode-hook #'set-evil-initial-state-in-normal-mode)

  ;;;; Custom behavior to keep evil from zealously killing emacs when in window-system
  ;;;; TODO: Incorporate http://zuttobenkyou.wordpress.com/category/emacs/
  (when window-system
    (defun save-and-kill-buffer ()
      (interactive)
      (save-buffer)
      (kill-buffer))

    (define-key evil-normal-state-map "ZZ" 'save-and-kill-buffer)
    (define-key evil-normal-state-map "ZQ" 'evil-delete-buffer)
    (evil-ex-define-cmd "q[uit]" 'evil-delete-buffer)
    (evil-ex-define-cmd "wq" 'save-and-kill-buffer))

  :bind (:map evil-normal-state-map
          ("C-a" . move-beginning-of-line)
          ("C-e" . move-end-of-line)
          :map evil-visual-state-map
          ("C-a" . move-beginning-of-line)
          ("C-e" . move-end-of-line)
          :map evil-insert-state-map
          ("C-a" . move-beginning-of-line)
          ("C-e" . move-end-of-line)))

;;; Nix Mode ;;;
(use-package nix-mode
  :mode "\\.nix\\'")

;;; Flycheck Mode ;;;
(use-package flycheck
  :commands (global-flycheck-mode flycheck-mode flycheck-add-next-checker)
  :config   (global-flycheck-mode)
  :hook     ((emacs-lisp-mode . flycheck-mode)
              (sh-mode . flycheck-mode)))

;;; Json Mode ;;;
(use-package json-mode
  :after evil
  :config (evil-set-initial-state 'json-mode 'normal))

;;; YAML ;;;
(use-package yaml-mode
  :after evil
  :config (evil-set-initial-state 'yaml-mode 'normal))

;;; Haskell ;;;
(use-package flycheck-haskell
  :after    flycheck
  :commands flycheck-haskell-setup
  :hook     (flycheck-mode . flycheck-haskell-setup))

(use-package haskell-mode
  :after evil
  :init (evil-set-initial-state 'haskell-cabal-mode 'normal)
  :config
  (remove-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
  (add-hook 'haskell-mode-hook #'interactive-haskell-mode)
  (setq-default haskell-indent-offset 2)
  (setq haskell-interactive-popup-errors  nil
    haskell-process-type              'auto
    haskell-tags-on-save              t
    haskell-process-args-stack-ghci   '("--ghci-options=-ferror-spans -fshow-loaded-modules"
                                         "--no-build"
                                         "--no-load"))
  (add-hook 'before-save-hook #'haskell-mode-stylish-buffer)
  :bind
  (:map haskell-mode-map
    ("C-c C-l" . haskell-process-load-file)
    ("C-c C-g" . projectile-configure-project)
    ("C-c C-c" . projectile-compile-project)
    ("C-`"     . haskell-interactive-bring)
    ("C-c c"   . haskell-process-cabal)
    ("C-c C-t" . haskell-process-do-type)
    ("C-c C-i" . haskell-process-do-info)
    ("C-c C-f" . haskell-cabal-visit-file)
    ;; Use dante-mode or intero-mode to jump to def with "M-."
    ("M-," . pop-tag-mark)
    )
  )

(use-package dante
  :after flycheck
  :config
  (flycheck-add-next-checker 'haskell-dante '(warning . haskell-hlint))
  :hook (dante-mode . flycheck-mode)
  )

(use-package intero)

;;; Rust Mode ;;;
(use-package toml-mode
  :after evil
  :config (evil-set-initial-state 'toml-mode 'normal) )

(use-package racer)

(use-package rust-mode
  :after racer
  :hook ((rust-mode . racer-mode)
          (rust-mode . eldoc-mode))
  :bind (:map rust-mode-map
          ("TAB" . company-indent-or-complete-common))
  :config
  (setq rust-format-on-save t)
  )

(provide 'dot-emacs)
;;; dot-emacs ends here
