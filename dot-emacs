;;; dot-emacs -- Matthew Doty's emacs configuration

;;; Commentary:
;;;   This .emacs is intended to download all dependencies if
;;;  ~/.emacs.d is ever deleted

;;; Code:

;;; Package Management ;;;

(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;;; General Emacs Settings ;;;
(eval-when-compile
  ;; use-package
  (when (not (package-installed-p 'use-package))
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)

  ;; Basic Interface
  (fset 'yes-or-no-p 'y-or-n-p)

  (setq
    inhibit-startup-screen      t       ; No startup screen
    disabled-command-function   nil     ; No prompts
    ring-bell-function          'ignore ; No error bell
    interprogram-cut-function   nil     ; No system clipboard (copy)
    interprogram-paste-function nil     ; No system clipboard (paste)
    vc-follow-symlinks          nil     ; Always follow symlinks
    initial-scratch-message     ""      ; No scratch message
    )

  (tool-bar-mode -1)                    ; No tool-bar
  (menu-bar-mode -1)                    ; No menu-bar
  (blink-cursor-mode -1)                ; No cursor blinking
  ;; No scroll bar
  (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))


  ;; Don't deselect after copy
  (defadvice kill-ring-save (after keep-transient-mark-active ())
    "Override the deactivation of the mark."
    (setq deactivate-mark nil))
  (ad-activate 'kill-ring-save)

  ;; Status bar
  (setq display-time-day-and-date t)
  (display-time-mode 1)
  (setq-default display-time-24hr-format t)
  (display-battery-mode 1)
  (setq-default battery-mode-line-format " [%b%t]")

  (require 'uniquify)
  (setq uniquify-buffer-name-style 'reverse)

  ;; Elisp
  (setq-default lisp-indent-offset 2)

  (defun eval-elisp-region-or-expression ()
    "Evaluate a region or expression in elisp."
    (interactive)
    (cond
      ;; If region selected, evaluate the region
      (mark-active
        (eval-region (region-beginning) (region-end) t))
      ;; If at the start of an s-expression, evaluate that s-expression
      ((string= "(" (string (char-after (point))))
        (save-excursion
          (forward-sexp)
          (eval-last-sexp nil)))
      ;; Otherwise just evaluate the last s-expression
      (t (eval-last-sexp nil))))

  (define-key emacs-lisp-mode-map
    (kbd "M-RET")
    'eval-elisp-region-or-expression)

  (define-key emacs-lisp-mode-map
    (kbd "s-<return>")
    'eval-elisp-region-or-expression)

  (defun evaluate-elisp-buffer ()
    "Evaluate a buffer of elisp expressions."
    (interactive)
    (eval-buffer)
    (message "Elisp evaluated %s" (buffer-file-name)))

  (define-key
    emacs-lisp-mode-map
    (kbd "C-c C-l")
    'evaluate-elisp-buffer)

  (setq eldoc-minor-mode-string nil)
  (add-hook 'emacs-lisp-mode-hook  #'eldoc-mode)

  (defun elisp-indent-file ()
    "Indent an elisp file."
    (when (equal major-mode 'emacs-lisp-mode)
      (indent-region (point-min) (point-max))))

  (add-hook 'before-save-hook #'elisp-indent-file)

  ;; Ido mode
  (ido-mode t)
  (setq-default
    ido-use-filename-at-point 'guess
    ido-use-url-at-point      t
    ido-create-new-buffer     'always)

  ;; Find file with line number at point
  ;; https://www.emacswiki.org/emacs/FindFileAtPoint#toc6
  (defvar ffap-file-at-point-line-number nil
    "Variable to hold line number from the last `ffap-file-at-point' call.")

  (defadvice ffap-file-at-point (after ffap-store-line-number activate)
    "Search `ffap-string-at-point' for a line number pattern and save it in the `ffap-file-at-point-line-number' variable."
    (let* ((string (ffap-string-at-point)) ;; string/name definition copied from `ffap-string-at-point'
            (name
              (or (condition-case nil
                    (and (not (string-match "//" string)) ; foo.com://bar
                      (substitute-in-file-name string))
                    (error nil))
                string))
            (line-number-string
              (and (string-match ":[0-9]+" name)
                (substring name (1+ (match-beginning 0)) (match-end 0))))
            (line-number
              (and line-number-string
                (string-to-number line-number-string))))
      (if (and line-number (> line-number 0))
        (setq ffap-file-at-point-line-number line-number)
        (setq ffap-file-at-point-line-number nil))))

  (defadvice find-file-at-point (after ffap-goto-line-number activate)
    "If `ffap-file-at-point-line-number' is non-nil goto this line."
    (when ffap-file-at-point-line-number
      (goto-line ffap-file-at-point-line-number)
      (setq ffap-file-at-point-line-number nil)))

  ;; Run git blame at point and put result in message buffer
  ;; based on: https://jayconrod.com/posts/67/emacs--run-git-blame-on-the-current-line
  (defun git-blame ()
    "Runs `git blame` on the current line and adds the commit id to the kill ring"
    (interactive)
    (let* ((line-number (save-excursion (goto-char (point-at-bol)) (+ 1 (count-lines 1 (point)))))
            (line-arg (format "%d,%d" line-number line-number))
            (commit-buf (generate-new-buffer "*git-blame-line-commit*")))
      (call-process "git" nil commit-buf nil "blame" "-L" line-arg "--" (buffer-file-name))
      (let* ((commit-id (with-current-buffer commit-buf (buffer-substring 1 9))))
        (kill-new commit-id)
        (if (string= "00000000" commit-id)
          (message "Not Committed Yet")
          (let* ((log-buf (generate-new-buffer "*git-blame-line-log*")))
            (call-process "git" nil log-buf nil "log" "-1" "--pretty=%h   %an   %s" commit-id)
            (with-current-buffer log-buf (message "Line %d: %s" line-number (buffer-string)))
            (kill-buffer log-buf)))
        (kill-buffer commit-buf))))

  (define-key global-map (kbd "C-c C-b") 'git-blame)

  ;; Eshell
  (defun eshell/open (file)
    "Eshell command to open a FILE or FILES."
    (find-file file))
  (defun eshell/openo (file)
    "Eshell command to open a FILE or FILES in another window."
    (find-file-other-window file))
  (defun eshell/bat (file)
    "Eshell command to open a FILE or FILES (read only)."
    (find-file-read-only-other-window file))
  (defun eshell/emacs (file &rest files)
    "Hack EMACS to just open a FILE or FILES in eshell."
    (apply #'eshell/open (cons file files)))
  (defun eshell/less (file &rest files)
    "Hack less to open a FILE or FILES (read only)."
    (apply #'eshell/bat (cons file files)))
  (defun eshell/more (file &rest files)
    "Hack more to open a FILE or FILES (read only)."
    (apply #'eshell/bat (cons file files)))

  ;; Window System Configuration

  (when window-system

    ;; Launch Eshell instead of scratch buffer
    (setq initial-buffer-choice 'eshell)

    ;; Transparency
    (set-frame-parameter (selected-frame) 'alpha '(95 95))

    ;; Font Ligatures for OS X
    (when (fboundp 'mac-auto-operator-composition-mode)
      (mac-auto-operator-composition-mode)
      (add-to-list 'default-frame-alist '(font . "Hasklig-14"))
      (set-face-attribute 'default t :font "Hasklig-14"))

    (setq default-directory "~/")             ; Default directory is home directory

    (when (equal system-type 'darwin)
      ;; Use familiar keys in OS X
      (setq-default
        mac-control-modifier 'control
        mac-option-modifier  'meta
        mac-command-modifier 'super)
      )
    )

  ;; Window system key bindings
  (defun get-command-key ()
    "Gets the command key for the platform system type."
    (pcase system-type
      ('darwin "s")
      ('x      "c")
      (other   "c")))

  (defun cmd-set-kbd (key command)
    "Set the command key + KEY combination to run a COMMAND."
    (when window-system
      (global-set-key
        (kbd (concat (get-command-key) "-" key)) command)))

  (defun cmd-mouse-click (button-combination command)
    "Set the command key and BUTTON-COMBINATION to run a COMMAND."
    (when window-system
      (global-set-key
        (kbd (concat
               "<" (get-command-key) "-mouse-" button-combination ">"))
        command)))

  (defun mode-cmd-set-kbd (mode key command)
    "For a MODE set the command key + KEY combination to run a COMMAND."
    (when window-system
      (define-key mode
        (kbd (concat (get-command-key) "-" key))
        'isearch-repeat-backward)))

  ;; Common key bindings
  (cmd-set-kbd "a" 'mark-whole-buffer)      ; Select all

  ;; Searching
  (cmd-set-kbd "f" 'isearch-forward)         ; Forward-search
  (mode-cmd-set-kbd isearch-mode-map "f" 'isearch-repeat-forward)
  (cmd-set-kbd "g" 'isearch-repeat-forward)  ; Forward-search (again)
  (cmd-set-kbd "F" 'isearch-backward)        ; Backward-search
  (mode-cmd-set-kbd isearch-mode-map "F" 'isearch-repeat-backward)
  (cmd-set-kbd "G" 'isearch-repeat-backward) ; Backward-search (again)

  (cmd-set-kbd "z" 'undo)                         ; Undo
  (cmd-set-kbd "s" 'save-buffer)                  ; Save
  (cmd-set-kbd "q" 'kill-emacs)                   ; Quit
  (cmd-set-kbd ";" 'comment-line)                 ; Comment line

  (cmd-mouse-click "1" 'find-file-at-point)       ; Open file clicked

  ;; Window Management

  (cmd-set-kbd "n" 'new-frame)                    ; New frame
  (cmd-set-kbd "w" 'delete-frame)                 ; Close the current frame
  (cmd-set-kbd "~" 'other-frame)                  ; Cycle frames
  (cmd-set-kbd "`" '(lambda () (other-frame -1))) ; Backward-cycle

  ;; Manipulate font size with usual bindings
  ;; To return to default font size, <C-x C-0>
  (cmd-set-kbd "=" 'text-scale-increase)    ; Increase font size
  (cmd-set-kbd "+" 'text-scale-increase)    ; Increase font size
  (cmd-set-kbd "-" 'text-scale-decrease)    ; Decrease font size

  ;; Built-in emacs mode hooks
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)

  ;; Put customizations in another file
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file 'noerror)
  )

;;; Interface ;;;
;; Powerline
(use-package powerline
  :config
  (powerline-center-evil-theme)
  (powerline-reset))

(use-package powerline-evil)

;; Theme
(use-package cyberpunk-theme
  :config (load-theme 'cyberpunk t))

;; Save position
(use-package saveplace :config (save-place-mode))

;; Use shell exec path
(use-package exec-path-from-shell
  :when (memq window-system '(mac ns x))
  :config
  (setq exec-path-from-shell-check-startup-files nil)
  (exec-path-from-shell-initialize))

;; Flexible ido
(use-package flx-ido
  :config
  (flx-ido-mode t)
  (setq-default
    ido-enable-flex-matching t
    ido-use-faces            nil))

;; Copy-Pasta
(use-package simpleclip
  :config
  ;; Settup interprogram clipboard interaction
  ;;; For X-Windows
  (when (eq window-system 'x)
    (global-set-key (kbd "C-S-c") #'simpleclip-copy)
    (global-set-key (kbd "C-S-x") #'simpleclip-cut)
    (global-set-key (kbd "C-S-v") #'simpleclip-paste))
  ;;; For OSX
  (when (memq window-system '(mac ns))
    (simpleclip-mode 1)))

;;; Prog-Mode ;;;
(use-package company
  :demand
  :diminish ""
  :hook (prog-mode . company-mode)
  :config
  (setq
    ;; bigger popup window
    company-tooltip-limit  20
    ;; decrease delay before autocompletion popup shows
    company-idle-delay     .3
    ;; remove annoying blinking
    company-echo-delay     0
    ;; start autocompletion only after typing
    company-begin-commands '(self-insert-command)
    ))

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package color
  :commands color-complement-hex)

(use-package paren
  :hook (prog-mode . show-paren-mode)
  :config
  (let ((cursor-color (face-attribute 'cursor :background)))
    (set-face-background 'show-paren-match (color-complement-hex cursor-color))
    (set-face-foreground 'show-paren-match cursor-color))
  )

;;; Formatting ;;;

(use-package ethan-wspace
  :hook (prog-mode . ethan-wspace-mode)
  :init  (setq-default mode-require-final-newline nil)
  :commands (ethan-wspace-clean-all clean-up-tabs set-makefile-whitespace-mode)
  :config
  (add-hook 'before-save-hook #'ethan-wspace-clean-all)
  (setq-default
    tab-width         2
    indent-tabs-mode  nil
    )

  ;; Only use tabs when making makefiles
  (defun clean-up-tabs ()
    "Cleans up tabs if not in `indent-tabs-mode`."
    (unless indent-tabs-mode
      (untabify (point-min) (point-max))))
  (add-hook 'before-save-hook #'clean-up-tabs)

  (defun set-makefile-whitespace-mode ()
    "Change whitespace settings to accept tabs, in a manner suitable for a Makefile."
    (setq ethan-wspace-errors (remove 'tabs ethan-wspace-errors)
      indent-tabs-mode    t))
  (add-hook 'makefile-mode-hook #'set-makefile-whitespace-mode)
  )

;;; Git ;;;

(use-package magit
  :bind ("C-c g" . magit-status)
  )

(use-package git-gutter
  :hook (prog-mode . git-gutter-mode)
  )

;;; Evil ;;;

(use-package evil
  :commands (evil-set-initial-state evil-ex-define-cmd)
  :init     (evil-mode)         ; Evil has to be global :-/
  :config
  ;; Ignore evil-mode except for prog-mode
  (setq
    evil-default-state  'emacs   ; Make default state be emacs (for repls and stuff)
    evil-default-cursor t        ; Use default emacs cursor
    evil-shift-width    2        ; Use 2 spaces when shifting with <<>>
    )

  ;; Most of the time we don't want to be in evil-mode, except for prog-mode
  (evil-set-initial-state 'prog-mode 'normal)
  (evil-set-initial-state 'eshell-mode 'emacs)

  ;;;; Custom behavior to keep evil from zealously killing emacs when in window-system
  ;;;; TODO: Incorporate http://zuttobenkyou.wordpress.com/category/emacs/
  (when window-system
    (defun save-and-kill-buffer ()
      (interactive)
      (save-buffer)
      (kill-buffer))

    (define-key evil-normal-state-map "ZZ" 'save-and-kill-buffer)
    (define-key evil-normal-state-map "ZQ" 'evil-delete-buffer)
    (evil-ex-define-cmd "q[uit]" 'evil-delete-buffer)
    (evil-ex-define-cmd "wq" 'save-and-kill-buffer))

  :bind (:map evil-normal-state-map
          ("C-a" . move-beginning-of-line)
          ("C-e" . move-end-of-line)
          :map evil-visual-state-map
          ("C-a" . move-beginning-of-line)
          ("C-e" . move-end-of-line)
          :map evil-insert-state-map
          ("C-a" . move-beginning-of-line)
          ("C-e" . move-end-of-line)))

;;; Nix Mode ;;;
(use-package nix-mode
  :mode "\\.nix\\'")

;;; Flycheck Mode ;;;
(use-package flycheck
  :commands (global-flycheck-mode flycheck-mode flycheck-add-next-checker)
  :config   (global-flycheck-mode)
  :hook     ((emacs-lisp-mode . flycheck-mode)
              (sh-mode . flycheck-mode)))

;;; Json Mode ;;;
(use-package json-mode
  :after evil
  :config (evil-set-initial-state 'json-mode 'normal))

;;; YAML ;;;
(use-package yaml-mode
  :after evil
  :config (evil-set-initial-state 'yaml-mode 'normal))

;;; Haskell ;;;
(use-package flycheck-haskell
  :after    flycheck
  :commands flycheck-haskell-setup
  :hook     (flycheck-mode . flycheck-haskell-setup)
  )

(use-package haskell-mode
  :after evil
  :init (evil-set-initial-state 'haskell-cabal-mode 'normal)
  :config
  (remove-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
  ;; (add-hook 'haskell-mode-hook #'interactive-haskell-mode)
  (setq-default haskell-indent-offset 2)
  (setq haskell-interactive-popup-errors  nil
    haskell-process-type                  'auto
    haskell-tags-on-save                  t
    haskell-process-args-stack-ghci
    '("--ghci-options=-ferror-spans -fshow-loaded-modules"
       "--no-build"
       "--no-load"))
  ;;(add-hook 'before-save-hook #'haskell-mode-stylish-buffer)
  :bind
  (:map haskell-mode-map
    ("C-c C-l" . haskell-process-load-file)
    ("C-c C-g" . projectile-configure-project)
    ("C-c C-c" . projectile-compile-project)
    ("C-`"     . haskell-interactive-bring)
    ("C-c c"   . haskell-process-cabal)
    ("C-c C-t" . haskell-process-do-type)
    ("C-c C-i" . haskell-process-do-info)
    ("C-c C-f" . haskell-cabal-visit-file)
    ;; Use dante-mode or intero-mode to jump to def with "M-."
    ("M-," . pop-tag-mark)
    )
  )

(use-package dante
  :after flycheck
  :config
  (flycheck-add-next-checker 'haskell-dante
    '(warning . haskell-hlint))
  :hook (dante-mode . flycheck-mode)
  )

(use-package intero)

;;; Python ;;;
;; company-jedi wires up jedi to be a backend for the auto completion
;; library, company-mode.
(use-package company-jedi
  :hook ((python-mode . jedi:setup))
  :commands (enable-company-jedi)
  :init
  (setq-default
    jedi:complete-on-dot t
    jedi:use-shortcuts   t)
  (defun enable-company-jedi ()
    (add-to-list 'company-backends 'company-jedi))
  (add-hook 'python-mode-hook #'enable-company-jedi)
  )

;; Local Variables:
;; mode: emacs-lisp
;; End:

(provide 'dot-emacs)
;;; .emacs ends here

